"""Animate the pendulum simulation data generated by pendulum.cpp"""

import struct
from typing import List

class Pin:
    fmt = "dd"
    unpack = struct.Struct(fmt).unpack_from
    structsize = struct.calcsize(fmt)
    def __init__(self, x: float, y: float):
        self.x = x
        self.y = y

class State:
    def __init__(self, x: float, y: float, xdot: float, ydot: float):
        self.x = x
        self.y = y
        self.xdot = xdot
        self.ydot = ydot

class Node:
    fmt = "dddddddd"
    unpack = struct.Struct(fmt).unpack_from
    structsize = struct.calcsize(fmt)
    def __init__(self, m: float, l: float, k: float, c: float, x: float, y: float, xdot: float, ydot: float):
        self.m = m
        self.l = l
        self.k = k
        self.c = c
        self.state = State(x, y, xdot, ydot)

class Chain:
    def __init__(self, ts: float, pin: Pin, nodes: List[Node]):
        self.ts = ts
        self.pin = pin
        self.nodes = nodes

if __name__ == "__main__":
    import sys
    if len(sys.argv) != 2:
        print("pendulumplot.py")
        print("Usage: pendulumplot <datafile>")
        print("Where <datafile> is the resultant output from pendulum.cpp")
        sys.exit(1)

    # Assume data file is argument
    fp = sys.argv[1]

    # Read binary data file
    chains: List[Chain] = []

    with open(fp, "rb") as f:
        while True:

            # Timestamp (double)
            tsData = f.read(struct.calcsize("d"))
            if not tsData: break # Signifies EOF
            ts, = struct.Struct("d").unpack_from(tsData)

            # Pin
            pinData = f.read(Pin.structsize)
            pin = Pin(*Pin.unpack(pinData))

            # Nodes (numNodes is size_t, i.e. unsigned long)
            numNodes, = struct.Struct("L").unpack_from(f.read(struct.calcsize("L")))

            nodes: List[Node] = []
            for _ in range(numNodes):
                nodeData = f.read(Node.structsize)
                node = Node(*Node.unpack(nodeData))
                nodes.append(node)

            chains.append(Chain(ts, pin, nodes))

    print(len(chains))
